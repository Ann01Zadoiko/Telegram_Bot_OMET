package com.example.registration;

import com.example.bot.TelegramBot;
import com.example.constance.museum.Registration;
import com.example.feature.museum.Museum;
import com.example.feature.museum.MuseumService;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class MuseumRegistration {

    private final UserStateManager stateManager;
    private final MuseumService museumService;

    // --- –ù–ê–ß–ê–õ–û –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
    @SneakyThrows
    public void startRegistration(Long chatId, TelegramBot bot) {
        log.info("üöÄ –ù–∞—á–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è chatId: {}", chatId);
        stateManager.startRegistration(chatId, RegistrationType.MUSEUM, 1);
        bot.sendMessage(chatId, "üìù " + Registration.STEP_2.getText());
    }

    // --- –û–ë–†–ê–ë–û–¢–ö–ê –≠–¢–ê–ü–û–í –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
    @SneakyThrows
    public void processRegistrationStep(Long chatId, String messageText, TelegramBot bot) {
        log.info("üîπ processRegistrationStep() –≤—ã–∑–≤–∞–Ω –¥–ª—è chatId: {}, step: {}", chatId, stateManager.getUserRegistration(chatId).getStep());

        UserRegistration userReg = stateManager.getUserRegistration(chatId);

        List<Museum> byChatId = museumService.getByChatId(chatId);
        Museum museum = byChatId.get(byChatId.size() - 1);

        switch (userReg.getStep()) {
            case 1:
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è: {}", messageText);

                museum.setFullName(messageText);
                museumService.save(museum);

                userReg.setFullName(messageText);
                userReg.nextStep();
                stateManager.updateUserRegistration(chatId, userReg); // üëà –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï
                bot.sendMessage(chatId, "üìû " + Registration.STEP_3.getText());
                break;

            case 2:
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {}", messageText);

                museum.setPhoneNumber(messageText);
                museumService.save(museum);

                userReg.setPhoneNumber(messageText);
                userReg.nextStep();
                stateManager.updateUserRegistration(chatId, userReg); // üëà –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï

                bot.sendMessage(chatId, "üë• " + Registration.STEP_4.getText());

                break;

            case 3:
                log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: {}", messageText);

                try {
                    int count = Integer.parseInt(messageText);
                    museum.setCountOfPeople(count);
                    museumService.save(museum);

                    userReg.setText("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: " + count);

                    bot.sendMessage(chatId, Registration.STEP_8.getText() + "\n" + Registration.STEP_7.getText());
                } catch (NumberFormatException e) {
                    bot.sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                    return;
                }
                stateManager.removeUser(chatId);
                break;
        }
    }
}
