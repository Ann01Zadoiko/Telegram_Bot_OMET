package com.example.handler.command.tracks;

import com.example.feature.transport.Transport;
import com.example.feature.transport.TransportService;
import com.example.handler.BotSenderService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;
import java.util.*;
import static com.example.handler.command.BotState.*;

@Slf4j
@Component
public class TracksBotHandler {
    private final TransportService transportService;
    private final Map<Long, UserSession> sessions = new HashMap<>();
    private final BotSenderService sender;

    public TracksBotHandler(TransportService transportService, BotSenderService sender) {
        this.transportService = transportService;
        this.sender = sender;
    }

    public void handleUpdate(Update update) {
        if (!update.hasMessage() && !update.hasCallbackQuery()) return;

        Long chatId;
        String text;

        if (update.hasMessage()) {
            chatId = update.getMessage().getChatId();
            text = update.getMessage().getText();
        } else {
            chatId = update.getCallbackQuery().getMessage().getChatId();
            text = update.getCallbackQuery().getData(); // –í–ê–ñ–ù–û!
        }

        UserSession session = sessions.computeIfAbsent(chatId, id -> new UserSession());

        if ("back".equals(text)) {
            if (!session.getStateHistory().isEmpty()) {
                session.setState(session.getStateHistory().pop());
            }
        } else {
            session.setLastInput(text); // üí° —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±—É–¥–µ—Ç –∏ –ø—Ä–∏ callback'–∞—Ö
        }

        switch (session.getState()) {
            case IDLE_TRACK -> handleIdleState(chatId, session);
            case TRACKS_ACTION_SELECTION -> handleTrackActionSelection(chatId, session);
            case TRACK_SELECT_TYPE -> handleTrackSelectType(chatId, session);
            case TRACK_ENTER_NUMBER, TRACK_ENTER_STOP_END, TRACK_ENTER_TIME,
                 TRACK_ENTER_LINK, TRACK_ENTER_INTERVAL -> handleAddTrackState(chatId, session);
            case TRACK_UPDATE_SELECT_FIELD, TRACK_UPDATE_ENTER_VALUE,
                 TRACK_UPDATE_ENTER_NEW_VALUE -> handleUpdateTrackState(chatId, session);
            case TRACK_DELETE_SELECT -> handleDeleteTrackState(chatId, session);
        }
    }

    private void handleIdleState(Long chatId, UserSession session) {
        if ("–ú–∞—Ä—à—Ä—É—Ç".equals(session.getLastInput())) {
            session.pushState(IDLE_TRACK);
            session.setState(TRACKS_ACTION_SELECTION);
            Map<String, String> actions = new LinkedHashMap<>();
            actions.put("–¥–æ–¥–∞—Ç–∏", "track_add");
            actions.put("–æ–Ω–æ–≤–∏—Ç–∏", "track_update");
            actions.put("–≤–∏–¥–∞–ª–∏—Ç–∏", "track_delete");
            sender.sendInlineKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", actions);

            log.info("{} current state", session.getState().toString());
        }
    }

    private void handleTrackActionSelection(Long chatId, UserSession session) {
        session.setPreviousAction(session.getLastInput());
        session.pushState(TRACKS_ACTION_SELECTION);
        session.setState(TRACK_SELECT_TYPE);
        sender.sendCallbackKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ –∑–∞—Å–æ–±—É:", List.of("—Ç—Ä–∞–º–≤–∞–π", "—Ç—Ä–æ–ª–µ–π–±—É—Å"), false);

        log.info("{} current state", session.getState().toString());
        log.info("{} previous action", session.getPreviousAction());

    }

    private void handleTrackSelectType(Long chatId, UserSession session) {
        session.setTransportType(session.getLastInput());
        session.pushState(TRACK_SELECT_TYPE);
        List<String> numbers = transportService.getNumbersByType(session.getTransportType());

        switch (session.getPreviousAction()) {
            case "track_add" -> {
                session.setState(TRACK_ENTER_NUMBER);
                sender.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç—å –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç—É:");
            }
            case "track_update" -> {
                session.setState(TRACK_UPDATE_SELECT_FIELD);
                sender.sendCallbackKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç—É:", numbers, false);
            }
            case "track_delete" -> {
                session.setState(TRACK_DELETE_SELECT);
                sender.sendCallbackKeyboard(chatId, "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç—É:", numbers, false);
            }
        }

        log.info("{} current state", session.getState().toString());
        log.info("{} last input", session.getLastInput());
    }

    private void handleAddTrackState(Long chatId, UserSession session) {
        switch (session.getState()) {
            case TRACK_ENTER_NUMBER -> {
                session.setTrackNumber(session.getLastInput().trim());
                session.pushState(TRACK_ENTER_NUMBER);
                session.setState(TRACK_ENTER_STOP_END);
                sender.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç—å –∫—ñ–Ω—Ü–µ–≤—ñ –∑—É–ø–∏–Ω–∫–∏:");
            }
            case TRACK_ENTER_STOP_END -> {
                session.setStopsStartEnd(session.getLastInput());
                session.pushState(TRACK_ENTER_STOP_END);
                session.setState(TRACK_ENTER_TIME);
                sender.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç—å —á–∞—Å –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è —Ä–æ–±–æ—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—É:");
            }
            case TRACK_ENTER_TIME -> {
                session.setTimeStartEnd(session.getLastInput());
                session.pushState(TRACK_ENTER_TIME);
                session.setState(TRACK_ENTER_LINK);
                sender.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç:");
            }
            case TRACK_ENTER_LINK -> {
                session.setLink(session.getLastInput());
                session.pushState(TRACK_ENTER_LINK);
                session.setState(TRACK_ENTER_INTERVAL);
                sender.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç—å —ñ–Ω—Ç–µ–≤–∞–ª:");
            }
            case TRACK_ENTER_INTERVAL -> {
                session.setInterval(session.getLastInput());
                saveTransport(session);
                session.setState(IDLE_TRACK);
                sender.sendMessage(chatId, "–ú–∞—Ä—à—Ä—É—Ç –¥–æ–¥–∞–Ω ‚úÖ");
            }
        }
        log.info("{} current state", session.getState().toString());
    }

    private void handleUpdateTrackState(Long chatId, UserSession session) {
        switch (session.getState()) {
            case TRACK_UPDATE_SELECT_FIELD -> {
                session.setTrackNumber(session.getLastInput());
                session.pushState(TRACK_UPDATE_SELECT_FIELD);
                session.setState(TRACK_UPDATE_ENTER_VALUE);
                sender.sendCallbackKeyboard(chatId, "–©–æ –±–∞–∂–∞—î—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏?",
                        List.of("–Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞", "–∫—ñ–Ω—Ü–µ–≤—ñ –∑—É–ø–∏–Ω–∫–∏", "—á–∞—Å —Ä–æ–±–æ—Ç–∏", "–ø–æ—Å–∏–ª–∞–Ω–Ω—è", "—ñ–Ω—Ç–µ—Ä–≤–∞–ª", "–ó–∞–≤–µ—Ä—à–∏—Ç–∏"), false);
            }
            case TRACK_UPDATE_ENTER_VALUE -> {
                if ("–ó–∞–≤–µ—Ä—à–∏—Ç—å".equals(session.getLastInput())) {
                    session.setState(IDLE_TRACK);
                    sender.sendMessage(chatId, "–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ");
                    return;
                }
                session.setUpdateField(session.getLastInput());
                session.pushState(TRACK_UPDATE_ENTER_VALUE);
                session.setState(TRACK_UPDATE_ENTER_NEW_VALUE); // –î–û–ë–ê–í–¨ –≠–¢–û –°–û–°–¢–û–Ø–ù–ò–ï –í ENUM
                sender.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:");
            }
            case TRACK_UPDATE_ENTER_NEW_VALUE -> {
                String newValue = session.getLastInput();
                updateTransport(session, newValue); // –≤—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                session.setState(TRACK_UPDATE_ENTER_VALUE); // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—è
                sender.sendCallbackKeyboard(chatId, "–©–æ –±–∞–∂–∞—î—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —â–µ?",
                        List.of("–Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞", "–∫—ñ–Ω—Ü–µ–≤—ñ –∑—É–ø–∏–Ω–∫–∏", "—á–∞—Å —Ä–æ–±–æ—Ç–∏", "–ø–æ—Å–∏–ª–∞–Ω–Ω—è", "—ñ–Ω—Ç–µ—Ä–≤–∞–ª", "–ó–∞–≤–µ—Ä—à–∏—Ç–∏"), false);
            }
        }

        log.info("{} current state", session.getState().toString());
    }

    private void handleDeleteTrackState(Long chatId, UserSession session) {
        transportService.deleteByTypeAndNumberOfTrack(session.getTransportType(), session.getLastInput());
        session.setState(IDLE_TRACK);
        sender.sendMessage(chatId, "–ú–∞—Ä—à—Ä—É—Ç –≤–∏–¥–∞–ª–µ–Ω ‚úÖ");

        log.info("{} current state", session.getState().toString());

    }

    private void saveTransport(UserSession session) {
        Transport t = new Transport();
        t.setType(session.getTransportType());
        t.setNumberOfTrack(session.getTrackNumber());
        t.setStopsStartEnd(session.getStopsStartEnd());
        t.setTime(session.getTimeStartEnd());
        t.setLink(session.getLink());
        t.setInterval(session.getInterval());

        transportService.add(t);

        log.info(t.toString());
    }

    private void updateTransport(UserSession session, String newValue) {
        Optional<Transport> optional = transportService.getByTypeAndNumber(session.getTransportType(), session.getTrackNumber());
        if (optional.isEmpty()) return;

        Transport transport = optional.get();
        switch (session.getUpdateField()) {
            case "–Ω–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞" -> transport.setNumberOfTrack(newValue);
            case "–∫—ñ–Ω—Ü–µ–≤—ñ –∑—É–ø–∏–Ω–∫–∏" -> transport.setStopsStartEnd(newValue);
            case "—á–∞—Å —Ä–æ–±–æ—Ç–∏" -> transport.setTime(newValue);
            case "–ø–æ—Å–∏–ª–∞–Ω–Ω—è" -> transport.setLink(newValue);
            case "—ñ–Ω—Ç–µ—Ä–≤–∞–ª" -> transport.setInterval(newValue);
        }

        transportService.update(transport); // –Ω–µ –∑–∞–±—É–¥—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ update
        log.info("Updated transport: {}", transport);
    }
}
