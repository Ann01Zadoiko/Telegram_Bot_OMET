package com.example.bot;

import com.example.config.BotConfig;
import com.example.constance.complaint.Complain;
import com.example.email.EmailSender;
import com.example.feature.complaint.Complaint;
import com.example.feature.complaint.ComplaintService;
import com.example.feature.museum.MuseumService;
import com.example.feature.user.UserService;
import com.example.handler.BotHandler;
import com.example.handler.HandlerCallback;
import com.example.handler.HandlerMessage;
import com.example.handler.button.*;
import com.example.registration.RegistrationType;
import com.example.registration.UserRegistration;
import com.example.registration.UserStateManager;
import lombok.RequiredArgsConstructor;
import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.util.List;



@Slf4j
@RequiredArgsConstructor
@Component
public class TelegramBot extends TelegramLongPollingBot{

    private final BotConfig config;
    private final MuseumService museumService;
    private final UserService userService;
    private final ComplaintService complaintService;
    private final UserStateManager stateManager = new UserStateManager();

    @Override
    public String getBotUsername() {
        return config.getName();
    }

    @Override
    public String getBotToken() {
        return config.getToken();
    }

    // --- –ù–ê–ß–ê–õ–û –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
    @SneakyThrows
    private void startRegistration(Long chatId, RegistrationType type) {
        stateManager.startRegistration(chatId, type);
        sendMessage(chatId, (type == RegistrationType.MUSEUM) ?
                "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –º—É–∑–µ–π):" :
                "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–¥–ª—è –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã):");
    }

    @SneakyThrows
    public void onUpdateReceived(Update update) {

        BotHandler botHandler = new BotHandler(
                new HandlerCallback(museumService),
                new HandlerMessage(museumService, userService, complaintService),
                config,
                museumService,
                userService, complaintService);

        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText().trim();

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if (stateManager.isUserRegistering(chatId)) {
                if (messageText.equalsIgnoreCase("/cancel")) {
                    stateManager.removeUser(chatId);
                    sendMessage(chatId, "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
                } else {
                    processRegistrationStep(chatId, messageText);
                }
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
            }

            // --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ê–ù–î ---
            switch (messageText.toLowerCase()) {

                case "/register":
                    startRegistration(chatId, RegistrationType.MUSEUM);
                    break;

                case "/complaint":
                    startRegistration(chatId, RegistrationType.COMPLAINT);
                    break;

                default:
                    sendMessage(chatId, "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.");
            }
        }

        if (update.hasCallbackQuery()){
            botHandler.answerToCallback(update);
        }
    }

//    @SneakyThrows
//    @Override
//    public void onUpdateReceived(Update update) {
//        BotHandler botHandler = new BotHandler(
//                new HandlerCallback(museumService),
//                new HandlerMessage(museumService, userService, complaintService),
//                config,
//                museumService,
//                userService, complaintService);
//
//        if (update.hasMessage() && update.getMessage().hasText()){
//            botHandler.answerToMessage(update);
//
//            String text = update.getMessage().getText();
//            Long chatId = update.getMessage().getChatId();
//
//            switch (text.toLowerCase()) {
//
//                case "/register":
//                    startRegistration(chatId, RegistrationType.MUSEUM);
//                    break;
//
//                case "/complaint":
//                    startRegistration(chatId, RegistrationType.COMPLAINT);
//                    break;
//
//                default:
//                    sendMessage(chatId, "‚ùì –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.");
//            }
//
//
//            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
//            if (stateManager.isUserRegistering(update.getMessage().getChatId())) {
//                if (update.getMessage().getText().equalsIgnoreCase("/cancel")) {
//                    stateManager.removeUser(update.getMessage().getChatId());
//                    sendMessage(update.getMessage().getChatId(), "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
//                } else {
//                    processRegistrationStep(update.getMessage().getChatId(), update.getMessage().getText());
//                }
//                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
//            }
//        }
//
//
//
//        if (update.hasCallbackQuery()){
//            botHandler.answerToCallback(update);
//        }
//
//    }

    // --- –û–ë–†–ê–ë–û–¢–ö–ê –≠–¢–ê–ü–û–í –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ---
    @SneakyThrows
    private void processRegistrationStep(Long chatId, String messageText) {
        UserRegistration userReg = stateManager.getUserRegistration(chatId);
        RegistrationType type = userReg.getType();

        switch (userReg.getStep()) {
            case 1:
                userReg.setFullName(messageText);
                userReg.nextStep();
                sendMessage(chatId, "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:");
                break;

            case 2:
                userReg.setPhoneNumber(messageText);
                userReg.nextStep();
                if (type == RegistrationType.MUSEUM) {
                    sendMessage(chatId, "üë• –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫:");
                } else {
                    sendMessage(chatId, "‚úç –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É:");
                }
                break;

            case 3:
                if (type == RegistrationType.MUSEUM) {
                    try {
                        int count = Integer.parseInt(messageText);
                        userReg.setText("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: " + count);
                        sendMessage(chatId, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –º—É–∑–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n" +
                                "–ò–º—è: " + userReg.getFullName() + "\n" +
                                "–¢–µ–ª–µ—Ñ–æ–Ω: " + userReg.getPhoneNumber() + "\n" +
                                userReg.getText());
                    } catch (NumberFormatException e) {
                        sendMessage(chatId, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                        return;
                    }
                } else {
                    userReg.setText(messageText);
                    sendMessage(chatId, "‚úÖ –ñ–∞–ª–æ–±–∞ –ø–æ–¥–∞–Ω–∞!\n" +
                            "–ò–º—è: " + userReg.getFullName() + "\n" +
                            "–¢–µ–ª–µ—Ñ–æ–Ω: " + userReg.getPhoneNumber() + "\n" +
                            "–ñ–∞–ª–æ–±–∞: " + userReg.getText());
                }
                stateManager.removeUser(chatId);
                break;
        }
    }




    @SneakyThrows
    public void sendMessage(long chatId, String text, long messageId, CallbackQuery callbackQuery) throws TelegramApiException {

        SendMessage sendMessage = SendMessage
                .builder()
                .chatId(chatId)
                .text(text)
                .replyToMessageId((int) messageId)
                .build();
        execute(sendMessage);

        answerCallback(callbackQuery);

        log.info("Reply sent: " + sendMessage.getText() + "\nBy user: " + sendMessage.getChatId());
    }


    public void answerCallback(CallbackQuery callbackQuery) throws TelegramApiException {

        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(callbackQuery.getId());
        answer.setShowAlert(false); // true, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ

        try {
            execute(answer);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    //send message for user
    @SneakyThrows
    public void sendMessage(long chatId, String text) throws TelegramApiException {

        SendMessage sendMessage = SendMessage
                .builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(KeyboardButtons.getButtons())
                .build();
        execute(sendMessage);

        log.info("Reply sent: " + sendMessage.getText() + "\nBy user: " + sendMessage.getChatId());
    }

    @SneakyThrows
    public void sendPhoto(long chatId, String text) throws TelegramApiException {

        File imageFile = new File(text);

        SendPhoto sendMessage = SendPhoto
                .builder()
                .chatId(chatId)
                .photo(new InputFile(imageFile))
                .replyMarkup(KeyboardButtons.getButtons())
                .build();
        execute(sendMessage);

    }

    @SneakyThrows
    public void sendMessage(long chatId, String text, InlineKeyboardMarkup markup) throws TelegramApiException {

        SendMessage sendMessage = SendMessage
                .builder()
                .chatId(chatId)
                .text(text)
                .replyMarkup(markup)
                .build();
        execute(sendMessage);

        log.info("Reply sent: " + sendMessage.getText() + "\nBy user: " + sendMessage.getChatId());
    }

    @SneakyThrows
    public void executeEditMessage(String text, Long chatId, long messageId, InlineKeyboardMarkup markup) {

        EditMessageText editMessageText = EditMessageText
                .builder()
                .messageId((int) messageId)
                .chatId(chatId)
                .replyMarkup(markup)
                .text(text)
                .build();
        execute(editMessageText);

        log.info("Reply sent: " + editMessageText.getText() + "\nBy user: " + editMessageText.getChatId());
    }

    @SneakyThrows
    public void sendMiniApp(Long chatId, InlineKeyboardMarkup markup, String text, long messageId, CallbackQuery callbackQuery){
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(markup);
        message.setReplyToMessageId((int) messageId);
        execute(message);

        answerCallback(callbackQuery);
    }
}

